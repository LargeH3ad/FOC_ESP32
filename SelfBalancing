// This code currently runs:
// - Self Balancing control (M#)
// On hardware:
// ESP32-wroom, DRV8302, AS5600

#include <SimpleFOC.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

// ====== Pin definitions ======
#define INH_A 16
#define INH_B 17
#define INH_C 12
#define EN_GATE 27
#define M_PWM 26
#define M_OC 36
#define OC_ADJ 25

// ====== Motor, Driver, Sensor ======
BLDCMotor motor = BLDCMotor(7); // Adjust pole pairs if needed
BLDCDriver3PWM driver = BLDCDriver3PWM(INH_A, INH_B, INH_C, EN_GATE);
MagneticSensorI2C sensor = MagneticSensorI2C(0x36, 12, 0x0E, 4);

// ====== IMU ======
Adafruit_MPU6050 mpu;
float pitch = 0;

// ====== Control filters and PIDs ======
PIDController pid_stb = PIDController(0.02, 0, 0.025, 200, 15);
PIDController pid_vel = PIDController(0.01, 0.02, 0, 10000, _PI / 10);  // Velocity PID

LowPassFilter lpf_pitch_cmd = LowPassFilter(0.3);
LowPassFilter lpf_throttle = LowPassFilter(0.5);
LowPassFilter lpf_steering = LowPassFilter(0.1);

// ====== Control Variables ======
float throttle = 0;
float steering = 0;
float max_throttle = 10;
float max_steering = 1;
int state = 1; // 1 = balancing enabled

// ====== Commander (Serial) ======
Commander commander = Commander(Serial);
void cntStab(char* cmd) { commander.pid(&pid_stb, cmd); }
void cntMove(char* cmd) { commander.pid(&pid_vel, cmd); }
void lpfPitch(char* cmd) { commander.lpf(&lpf_pitch_cmd, cmd); }
void lpfSteering(char* cmd) { commander.lpf(&lpf_steering, cmd); }
void lpfThrottle(char* cmd) { commander.lpf(&lpf_throttle, cmd); }

// ====== IMU Setup ======
bool initIMU() {
  if (!mpu.begin()) {
    Serial.println("MPU6050 not detected");
    return false;
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  return true;
}

float getPitch() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  return atan2(a.acceleration.x, a.acceleration.z) * 180.0 / PI;
}

void setup() {
  Serial.begin(115200);

  // DRV8302 setup
  pinMode(M_OC, OUTPUT); digitalWrite(M_OC, LOW);
  pinMode(M_PWM, OUTPUT); digitalWrite(M_PWM, HIGH);
  pinMode(OC_ADJ, OUTPUT); digitalWrite(OC_ADJ, HIGH);

  // IMU
  if (!initIMU()) {
    Serial.println("IMU init failed. Halting.");
    while (1);
  }

  // Sensor & Motor
  sensor.init();
  motor.linkSensor(&sensor);

  driver.voltage_power_supply = 24;
  driver.init();
  motor.linkDriver(&driver);

  motor.controller = MotionControlType::torque;
  motor.useMonitoring(Serial);
  motor.init();
  motor.initFOC();

  // Commander interface for tuning
  commander.add('A', cntStab, "PID stability");
  commander.add('B', cntMove, "PID velocity");
  commander.add('C', lpfThrottle, "LPF throttle");
  commander.add('D', lpfPitch, "LPF pitch");
  commander.add('E', lpfSteering, "LPF steering");

  Serial.println("Self-balancing robot ready (no Bluetooth)");
}

void loop() {
  motor.loopFOC();

  if (!state) {
    motor.target = 0;
  } else {
    pitch = getPitch();
    float vel_avg = motor.shaft_velocity;
    float target_pitch = lpf_pitch_cmd(pid_vel(vel_avg - lpf_throttle(throttle)));
    float voltage = pid_stb(target_pitch - pitch);
    float steer_adj = lpf_steering(steering);
    motor.target = voltage + steer_adj;
  }

  motor.move();
  commander.run();

  // Optional: Print pitch for debug
  Serial.print("Pitch: "); Serial.println(pitch);
}
