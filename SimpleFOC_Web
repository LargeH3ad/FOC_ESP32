#include <WiFi.h>
#include <WebServer.h>
#include <SimpleFOC.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

// ====== WiFi ======
const char* ssid = "SSID";
const char* password = "PASSWORD";
WebServer server(80);

IPAddress local_IP(192, 168, 86, 36);
IPAddress gateway(192, 168, 86, 1);
IPAddress subnet(255, 255, 255, 0);

// ====== Driver 1 ======
#define INH_A1 16
#define INH_B1 17
#define INH_C1 12
#define EN_GATE1 27
#define M_PWM1 26
#define M_OC1 14
#define OC_ADJ1 25

// ====== Driver 2 ======
#define INH_A2 32
#define INH_B2 33
#define INH_C2 19
#define EN_GATE2 13
#define M_PWM2 18
#define M_OC2 34
#define OC_ADJ2 23

#define PCA9548A_ADDR 0x70

void selectI2CChannel(uint8_t channel) {
  Wire.beginTransmission(PCA9548A_ADDR);
  Wire.write(1 << channel);
  Wire.endTransmission();
}

BLDCMotor motor1 = BLDCMotor(7);
BLDCDriver3PWM driver1 = BLDCDriver3PWM(INH_A1, INH_B1, INH_C1, EN_GATE1);
BLDCMotor motor2 = BLDCMotor(7);
BLDCDriver3PWM driver2 = BLDCDriver3PWM(INH_A2, INH_B2, INH_C2, EN_GATE2);

MagneticSensorI2C encoder1 = MagneticSensorI2C(0x36, 12, 0x0E, 4);
MagneticSensorI2C encoder2 = MagneticSensorI2C(0x36, 12, 0x0E, 4);

Adafruit_MPU6050 mpu;
float pitch = 0;

PIDController pid_stb = PIDController(0.036, 0.025, 0, 10000, 7);
PIDController pid_vel = PIDController(0.01, 0.0, 0.0, 10000, _PI / 10);

LowPassFilter lpf_pitch_cmd = LowPassFilter(0.15);
LowPassFilter lpf_throttle = LowPassFilter(0.5);
LowPassFilter lpf_steering = LowPassFilter(0.1);
LowPassFilter lpf_pitch = LowPassFilter(0);

float throttle = 0;
float steering = 0;
float max_throttle = 10;
float max_steering = 1;
int state = 1;

Commander commander = Commander(Serial);
void cntStab(char* cmd) { commander.pid(&pid_stb, cmd); }
void cntMove(char* cmd) { commander.pid(&pid_vel, cmd); }
void lpfPitch(char* cmd) { commander.lpf(&lpf_pitch_cmd, cmd); }
void lpfSteering(char* cmd) { commander.lpf(&lpf_steering, cmd); }
void lpfThrottle(char* cmd) { commander.lpf(&lpf_throttle, cmd); }

bool initIMU() {
  if (!mpu.begin()) return false;
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  return true;
}

float getPitch() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  return atan2(a.acceleration.x, a.acceleration.z) * 180.0 / PI;
}

// ====== Web interface ======
String htmlPage() {
  String html = "<!DOCTYPE html><html><body><h2>Self-Balancing Robot PID Control</h2>";

  // Live pitch display
  html += "<p>Pitch: <span id='pitch'>" + String(pitch, 2) + "</span>°</p>";

  // PID form
  html += "<form id='pidForm'>";
  html += "Kp: <input id='kp' step='0.0001' value='" + String(pid_stb.P, 4) + "'> ";
  html += "Ki: <input id='ki' step='0.0001' value='" + String(pid_stb.I, 4) + "'> ";
  html += "Kd: <input id='kd' step='0.0001' value='" + String(pid_stb.D, 4) + "'> ";
  html += "<button type='button' onclick='updatePID()'>Update</button></form>";

  // JavaScript for pitch polling and PID updating
  html += R"rawliteral(
    <script>
      // Update pitch every 100ms
      setInterval(() => {
        fetch('/pitch').then(r => r.text()).then(p => {
          document.getElementById('pitch').textContent = p;
        });
      }, 100);

      // Send PID values to server
      function updatePID() {
        const kp = document.getElementById('kp').value;
        const ki = document.getElementById('ki').value;
        const kd = document.getElementById('kd').value;
        fetch(`/update?kp=${kp}&ki=${ki}&kd=${kd}`)
          .then(r => r.text())
          .then(t => console.log("PID updated")); // Optionally show confirmation
      }
    </script>
  )rawliteral";

  html += "</body></html>";
  return html;
}


void handleRoot() {
  server.send(200, "text/html", htmlPage());
}

void handleUpdate() {
  if (server.hasArg("kp")) pid_stb.P = server.arg("kp").toFloat();
  if (server.hasArg("ki")) pid_stb.I = server.arg("ki").toFloat();
  if (server.hasArg("kd")) pid_stb.D = server.arg("kd").toFloat();
  server.send(200, "text/html", htmlPage());
}

void handlePitch() {
  server.send(200, "text/html", htmlPage());
}

void setup() {
  Serial.begin(115200);
  Wire.begin();

  if (!WiFi.config(local_IP, gateway, subnet)) {
    Serial.println("❌ Failed to configure static IP");
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("✅ WiFi connected! IP address: ");
  Serial.println(WiFi.localIP());

  

  server.on("/", handleRoot);
  server.on("/update", handleUpdate);
  server.on("/pitch", handlePitch);
  server.begin();

  pinMode(M_OC1, OUTPUT); digitalWrite(M_OC1, LOW);
  pinMode(M_PWM1, OUTPUT); digitalWrite(M_PWM1, HIGH);
  delay(250);
  pinMode(M_OC2, OUTPUT); digitalWrite(M_OC2, LOW);
  pinMode(M_PWM2, OUTPUT); digitalWrite(M_PWM2, HIGH);
  delay(250);

  if (!initIMU()) while (1);

  Serial.println("Initialising encoder 1");
  selectI2CChannel(2);
  encoder1.init();
  motor1.linkSensor(&encoder1);
  driver1.voltage_power_supply = 24;
  driver1.init();
  motor1.linkDriver(&driver1);
  motor1.controller = MotionControlType::torque;
  motor1.useMonitoring(Serial);
  motor1.init();
  motor1.initFOC();

  delay(250);
  Serial.println("Initialising encoder 2");
  selectI2CChannel(3);
  encoder2.init();
  motor2.linkSensor(&encoder2);
  driver2.voltage_power_supply = 24;
  driver2.init();
  motor2.linkDriver(&driver2);
  motor2.controller = MotionControlType::torque;
  motor2.useMonitoring(Serial);
  motor2.init();
  motor2.initFOC();

  commander.add('A', cntStab, "PID stability");
  commander.add('B', cntMove, "PID velocity");
  commander.add('C', lpfThrottle, "LPF throttle");
  commander.add('D', lpfPitch, "LPF pitch");
  commander.add('E', lpfSteering, "LPF steering");

  Serial.println("Self-balancing robot ready (dual encoder support)");
}

void loop() {
  static uint32_t last_update = 0;
  uint32_t now = micros();
  if (now - last_update < 10000) return;
  last_update = now;

  server.handleClient();

  selectI2CChannel(2); motor1.loopFOC(); motor1.move();
  selectI2CChannel(3); motor2.loopFOC(); motor2.move();

  if (!state) {
    motor1.target = 0;
    motor2.target = 0;
  } else {
    pitch = lpf_pitch(getPitch());
    float vel_avg = motor1.shaft_velocity;
    float target_pitch = 4;
    float pitch_error = target_pitch - pitch;
    float voltage = pid_stb(pitch_error);
    float steer_adj = lpf_steering(steering);
    motor1.target = voltage;
    motor2.target = voltage;
  }

  commander.run();
}
